<%- include('../layouts/adminHeader') %>

<div class="container" style="margin-left: 120px;">
  <!-- Return Requests Table -->
  <div class="card" style="margin-left: 120px;">
    <div class="card-body">
      <h5 class="card-title mb-4">Return Requests</h5>
      <div class="table-responsive">
        <div class="table-container">
          <% if (!returnRequests || returnRequests.length === 0) { %>
            <p>No return requests yet.</p>
          <% } else { %>
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Order ID</th>
                  <th>Customer Name</th>
                  <th>Product Image</th>
                  <th>Product Name</th>
                  <th>Return Reason</th>
                  <th>Status</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                <% returnRequests.forEach((order) => { %>
                  <% order.orderedItem.forEach((item) => { %>
                    <% if (item.status === 'returnrequested') { %>
                      <tr>
                        <td><%= order._id %></td>
                        <td><%= order.userId ? order.userId.name : 'Unknown' %></td>
                        <td>
                          <div style="max-width: 100px; max-height: 100px; overflow: hidden; border: 1px solid #ccc; border-radius: 5px;">
                            <% if (item.productId && item.productId.mainImage) { %>
                              <img src="<%= process.env.BASE_URL %>/uploads/products/<%= item.productId.mainImage %>" alt="<%= item.productId.name %> image" style="width: 100%; height: auto; object-fit: cover;">
                            <% } else { %>
                              <span>No image available</span>
                            <% } %>
                          </div>
                        </td>
                        <td><%= item.productId ? item.productId.name : 'No Product Name' %></td>
                        <td><%= item.reason %></td>
                        <td>
                          <span class="badge status-label return-requested"><%= item.status %></span>
                        </td>
                        <td>
                          <div class="btn-group" role="group">
                            <button onclick="handleAcceptReturn('<%= order._id %>', '<%= item.productId._id %>')" class="btn btn-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Accept Return">
                              <i class="bx bx-check"></i>
                            </button>
                            <button onclick="handleDeclineReturn('<%= order._id %>', '<%= item.productId._id %>')" class="btn btn-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="Decline Return">
                              <i class="bx bx-x"></i>
                            </button>
                          </div>
                        </td>
                      </tr>
                    <% } %>
                  <% }); %>
                <% }); %>
              </tbody>
            </table>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('../layouts/adminFooter') %>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<script>
  async function handleAcceptReturn(orderId, productId) {
    const confirmation = await confirmAction('accept');
    if (confirmation) {
        try {
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/admin/acceptReturn', true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            xhr.onload = function() {
                try {
                    const data = JSON.parse(xhr.responseText);
                    if (xhr.status === 200 && data.success) {
                        swal('Success', data.success, 'success').then(() => {
                            window.location.reload();
                        });
                    } else {
                        swal('Error', data.error || 'Failed to accept return', 'error');
                    }
                } catch (e) {
                    console.error('Error parsing response:', e);
                    swal('Error', 'Invalid response from server', 'error');
                }
            };

            xhr.onerror = function() {
                console.error('Network error:', xhr.statusText);
                swal('Error', 'Network error occurred', 'error');
            };

            xhr.send(JSON.stringify({ orderId, productId }));
        } catch (error) {
            console.error('Error in handleAcceptReturn:', error);
            swal('Error', 'An unexpected error occurred', 'error');
        }
    }
  }

  async function handleDeclineReturn(orderId, productId) {
    const confirmation = await confirmAction('decline');
    if (confirmation) {
      const xhr = new XMLHttpRequest();
      xhr.open('POST', '/admin/declineReturn', true);
      xhr.setRequestHeader('Content-Type', 'application/json');

      xhr.onload = function () {
        if (xhr.status === 200) {
          const data = JSON.parse(xhr.responseText);
          if (data.success) {
            swal('Success', data.success, 'success').then(() => {
              window.location.reload(); // Reload page after successful operation
            });
          } else {
            swal('Error', data.error, 'error');
          }
        } else {
          swal('Error', 'Failed to decline return', 'error');
          console.error('Failed to decline return:', xhr.status);
        }
      };

      xhr.onerror = function () {
        console.error('Error declining return:', xhr.statusText);
        swal('Error', 'An error occurred while declining the return', 'error');
      };

      xhr.send(JSON.stringify({ orderId, productId }));
    }
  }

  async function confirmAction(action) {
    let confirmationText;
    switch (action) {
      case 'accept':
        confirmationText = 'accept this return';
        break;
      case 'decline':
        confirmationText = 'decline this return';
        break;
      default:
        confirmationText = 'perform this action';
    }

    return new Promise((resolve) => {
      swal({
        title: `Are you sure you want to ${confirmationText}?`,
        text: 'Once confirmed, the action cannot be undone.',
        icon: 'warning',
        buttons: ['Cancel', 'Confirm'],
        dangerMode: true,
      }).then((confirmed) => {
        resolve(confirmed);
      });
    });
  }
</script>

<style>
  .table-container {
    position: relative;
    overflow-x: auto; /* Add horizontal scroll for small screens */
  }

  /* Define colors for each status */
  .status-label.pending {
    background-color: #ffc107; /* Yellow */
  }
  .status-label.confirmed {
    background-color: #0d6efd; /* Blue */
  }
  .status-label.shipped {
    background-color: #198754; /* Green */
  }
  .status-label.delivered {
    background-color: #198754; /* Green */
  }
  .status-label.cancelled {
    background-color: #dc3545; /* Red */
  }
  .status-label.return-requested {
    background-color: #ffc107; /* Yellow for return requested */
  }
</style>

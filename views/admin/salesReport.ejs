<%- include('../layouts/adminHeader') %>

<div class="container-fluid mt-4" style="margin-left: 16rem;">
  <div class="row">
    <div class="col-12">
      <h2 class="mb-4">Sales Report</h2>
      
      <!-- Date Range Selection -->
      <div class="mb-4">
        <select id="dateRange" class="form-select">
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
          <option value="custom">Custom Date Range</option>
        </select>
      </div>

      <!-- Sales Report Card -->
      <div class="card">
        <div class="card-body">
          <div class="table-responsive" id="salesReportTable">
            <!-- Table will be dynamically inserted here -->
          </div>
        </div>
        <div class="card-footer">
          <nav aria-label="Sales report pagination">
            <ul class="pagination justify-content-center" id="pagination">
              <!-- Pagination will be dynamically inserted here -->
            </ul>
          </nav>
          <!-- <button class="btn btn-primary mt-3" id="downloadPdfBtn">Download PDF</button> -->
          <div class="d-flex justify-content-center gap-2 mt-3">
            <button class="btn btn-primary" id="downloadPdfBtn">Download PDF</button>
            <button class="btn btn-success" id="downloadExcelBtn">Download Excel</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal for Custom Date Range -->
<div class="modal fade" id="customDateModal" tabindex="-1" aria-labelledby="customDateModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="customDateModalLabel">Select Custom Date Range</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="customDateForm">
          <div class="mb-3">
            <label for="startDateModal" class="form-label">Start Date:</label>
            <input type="date" id="startDateModal" class="form-control">
          </div>
          <div class="mb-3">
            <label for="endDateModal" class="form-label">End Date:</label>
            <input type="date" id="endDateModal" class="form-control">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="applyCustomDates">Apply</button>
      </div>
    </div>
  </div>
</div>

<%- include('../layouts/adminFooter') %>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
$(document).ready(function() {
  const dateRangeSelect = $('#dateRange');
  const customDateModal = $('#customDateModal');
  const applyCustomDatesBtn = $('#applyCustomDates');
  const startDateInput = $('#startDateModal');
  const endDateInput = $('#endDateModal');
  const downloadPdfBtn = $('#downloadPdfBtn');

  let currentCustomStartDate = '';
  let currentCustomEndDate = '';
  let lastValidSelection = 'daily';

    customDateModal.on('show.bs.modal', function() {
      $('#startDateModal').val(currentCustomStartDate || '');
      $('#endDateModal').val(currentCustomEndDate || '');
    });

    dateRangeSelect.on('change', function() {
    const selectedRange = $(this).val();
    if (selectedRange === 'custom') {
      if (currentCustomStartDate && currentCustomEndDate) {
        startDateInput.val(currentCustomStartDate);
        endDateInput.val(currentCustomEndDate);
      } else {
        // Clear the inputs if no existing custom dates
        startDateInput.val('');
        endDateInput.val('');
      }
        customDateModal.modal('show');
    } else {
        lastValidSelection = selectedRange;
        currentCustomStartDate = '';
        currentCustomEndDate = '';
        fetchAndDisplaySalesReport(selectedRange);
    }
});

    applyCustomDatesBtn.click(function() {
      const newStartDate = startDateInput.val();
      const newEndDate = endDateInput.val();

      if (!newStartDate || !newEndDate) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Date Range',
          text: 'Please select both start and end dates.',
          confirmButtonColor: '#3085d6'
        });
        return;
      }

      if (new Date(newEndDate) < new Date(newStartDate)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Date Range',
          text: 'End date must be after start date.',
          confirmButtonColor: '#3085d6'
        });
        return;
      }

      currentCustomStartDate = newStartDate;
      currentCustomEndDate = newEndDate;
      lastValidSelection = 'custom';
      
      customDateModal.modal('hide');
      fetchAndDisplaySalesReport('custom', currentCustomStartDate, currentCustomEndDate);
    });


  customDateModal.on('hidden.bs.modal', function() {
        if (!currentCustomStartDate && !currentCustomEndDate) {
          dateRangeSelect.val(lastValidSelection);
        }
  });

  customDateModal.on('show.bs.modal', function() {
    startDateInput.val(currentCustomStartDate);
    endDateInput.val(currentCustomEndDate);
  });

  downloadPdfBtn.click(function() {
    const currentDateRange = dateRangeSelect.val();
    let startDate = null;
    let endDate = null;
    
    if (currentDateRange === 'custom') {
        startDate = $('#startDateModal').val();
        endDate = $('#endDateModal').val();
    }
    
    $(this).text('Generating PDF...').prop('disabled', true);
    
    
    fetch('/admin/downloadsalesreport', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            dateRange: currentDateRange,
            startDate: startDate,
            endDate: endDate
        })
    })
    .then(response => {
      if (response.status === 404) {
            throw new Error('No data available');
        }
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.blob();
    })
      .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'salesReport.pdf';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message === 'No data available' 
                ? 'No sales data available for the selected date range.'
                : 'Failed to download PDF. Please try again.',
            confirmButtonColor: '#3085d6'
        });
    })
      .finally(() => {
        $(this).text('Download PDF').prop('disabled', false);
      });
  });

  const downloadExcelBtn = $('#downloadExcelBtn');

    downloadExcelBtn.click(function() {
      const currentDateRange = dateRangeSelect.val();
    let startDate = null;
    let endDate = null;
    
    if (currentDateRange === 'custom') {
        startDate = $('#startDateModal').val();
        endDate = $('#endDateModal').val();
    }
    
    $(this).text('Generating Excel...').prop('disabled', true);
    
    fetch('/admin/downloadsalesexcel', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            dateRange: currentDateRange,
            startDate: startDate,
            endDate: endDate
        })
    })
    .then(response => {
      if (response.status === 404) {
            throw new Error('No data available');
        }
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.blob();
    })
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'salesReport.xlsx';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message === 'No data available' 
                    ? 'No sales data available for the selected date range.'
                    : 'Failed to download Excel. Please try again.',
                confirmButtonColor: '#3085d6'
            });
          })
            .finally(() => {
                $(this).text('Download Excel').prop('disabled', false);
            });
    });

  function fetchAndDisplaySalesReport(dateRange, startDate, endDate, page = 1) {
    $.ajax({
      url: '/admin/sortReport',
      method: 'POST',
      data: { dateRange, startDate, endDate, page },
      success: function(response) {
        console.log("Received response:", response);
        const salesReportTable = $('#salesReportTable');
        const salesData = response.salesData;

        salesReportTable.empty();

        if (!salesData || salesData.length === 0) {
          salesReportTable.html('<p class="text-muted">No sales data available for the selected date range.</p>');
        } else {
          const table = $('<table class="table table-hover"></table>');
          const tableHead = $('<thead><tr><th>Sale ID</th><th>Customer Name</th><th>Product Image</th><th>Product Name</th><th>Quantity</th><th>Total Price</th><th>Discount</th><th>Final Price</th><th>Date</th></tr></thead>');
          const tableBody = $('<tbody></tbody>');
          
          salesData.forEach(sale => {
            const row = `
              <tr>
                <td>${sale.saleId}</td>
                <td>${sale.customerName}</td>
                <td>
                  <div style="max-width: 100px; max-height: 100px; overflow: hidden; border: 1px solid #ccc; border-radius: 5px;">
                    ${sale.productImage ? `<img src="/uploads/products/${sale.productImage}" alt="${sale.productName} image" style="width: 100%; height: auto; object-fit: cover;">` : `<span class="text-muted">No image</span>`}
                  </div>
                </td>
                <td>${sale.productName}</td>
                <td>${sale.quantity}</td>
                <td>Rs.${sale.totalPrice.toFixed(2)}</td>
                <td>Rs.${sale.discount.toFixed(2)}</td>
                <td>Rs.${sale.finalPrice.toFixed(2)}</td>
                <td>${moment(sale.saleDate).format('DD/MM/YYYY')}</td>
              </tr>
            `;
            tableBody.append(row);
          });
          
          table.append(tableHead).append(tableBody);
          salesReportTable.append(table);
        }

        updatePagination(response.totalPages, response.currentPage, dateRange, startDate, endDate);
      },
      error: function(err) {
        console.error('Error fetching and displaying sales report:', err);
        $('#salesReportTable').html('<p class="text-danger">Error fetching sales data. Please try again.</p>');
      }
    });
  }

  function updatePagination(totalPages, currentPage, dateRange, startDate, endDate) {
    const pagination = $('#pagination');
    pagination.empty();
    for (let i = 1; i <= totalPages; i++) {
      const pageItem = `
        <li class="page-item ${i === currentPage ? 'active' : ''}">
          <a class="page-link" href="#" data-page="${i}">${i}</a>
        </li>
      `;
      pagination.append(pageItem);
    }

    pagination.find('.page-link').on('click', function(e) {
      e.preventDefault();
      const page = $(this).data('page');
      fetchAndDisplaySalesReport(dateRange, startDate, endDate, page);
    });
  }

  // Initial load of sales report
  fetchAndDisplaySalesReport('daily');
});
</script>